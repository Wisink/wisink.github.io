<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown基本语法介绍]]></title>
    <url>%2FMarkDown-Grammer%2F</url>
    <content type="text"><![CDATA[Hexo博客生成器需要通过编译MarkDown格式的文件生成html进行最后的展示，在使用MarkDown编辑器(Typecho)之前你需要先了解一下关于markdown的基本语法，如果你已经掌握了，请无视本文档，如果还没有，那现在开始学习吧。 1.标题 使用 # 表示标题，一级标题使用一个 # ，二级标题使用两个 ## ，以此类推，共有六级标题。 使用 ===== 表示高阶标题，使用 --------- 表示次阶标题。 # 和标题之间最好加一个空格。不要问我为什么，貌似有时候不会被识别为标题？已经忘记自己为什么要加空格了，也许是任性。 ==== 和 ---- 表示标题时，大于等于2个都可以表示。 我通常在标题分级时使用标题标记，这个的用处很明了了。 示例11234# 这是一级标题## 这是二级标题### 这是三级标题###### 这是六级标题 这是一级标题这是二级标题这是三级标题示例212345这是一级标题========这是二级标题-------------- 这是一级标题这是二级标题2.引用使用 &gt; 表示引用， &gt;&gt; 表示引用里面再套一层引用，依次类推。 如果 &gt; 和 &gt;&gt; 嵌套使用的话，从 &gt;&gt; 退到 &gt; 时，必须之间要加一个空格或者 &gt; 作为过渡，否则默认为下一行和上一行是同一级别的引用。如示例所示。 引用标记里可以使用其他标记，如：有序列表或无序列表标记，代码标记等。 示例12345&gt; 这是一级引用&gt;&gt;这是二级引用&gt;&gt;&gt; 这是三级引用&gt;这是一级引用 这是一级引用 这是二级引用 这是三级引用 这是一级引用 1.3 代码块使用三个`表示代码块。 这个符号是在Esc`键下面，切换到英文下即可。 本文档所有使用讲解Markdown语法标记示例的地方都是使用代码块标记的。 12345$(document).ready(function() &#123; $('pre code').each(function(i, block) &#123; hljs.highlightBlock(block); &#125;);&#125;); 1.4 行内代码使用``表示行内代码。本页部分文字中间的英文字母就是使用行内代码标记标记的。 示例 1这是`javascript`代码 这是 javascript 代码 1.5 链接使用 [](link) 表示行内链接。其中： [] 内的内容为要添加链接的文字。 link 为链接地址。 示例 我觉得Typecho真是个非常厉害的Markdown编辑器😊. 1.6 导入图片使用 ![](/path/to/img.jpg) 导入图片。其中： Alt text 为如果图片无法显示时显示的文字； /path/to/img.jpg 为图片所在路径； 示例 1![mark](http://or9pcbgcv.bkt.clouddn.com/blog/180121/87DAlKa6kB.jpg?imageslim) 1.7 粗体和斜体 使用 ** 或者 __ 表示粗体。 使用 * 或者 _ 表示斜体。 前后的 * 或 _ 与要 加粗或倾斜 的字体之间不能有空格。 示例 12**粗体1** __粗体2__*斜体1* _斜体2_ 粗体1 粗体2 斜体1 斜体2 1.8 列表使用 1\. 2\. 3. 表示有序列表，使用 * 或 - 或 + 表示无序列表。 无序列表或有序列表标记和后面的文字之间要有一个空格隔开。 有序列表标记不是按照你写的数字进行显示的，而是根据当前有序列表标记所在位置显示的，如示例1所示。 无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的，如例2所示。通常情况下，同一层级使用同一种标记表示，便于自己查看和管理。 无序列表和有序列表标记的使用场景也很明了，故不多说。 示例 例1：有序列表1231\. 第一点2\. 第二点4\. 第三点 第一点 第二点 第三点 例2：无序列表1234567+ 呵呵 * 嘉嘉 - 嘻嘻 - 吼吼 - 嘎嘎 + 桀桀* 哈哈 呵呵 嘉嘉 嘻嘻 吼吼 嘎嘎 桀桀 哈哈 1.9 分割线使用 --- 或者 *** 或者 * * * 表示水平分割线。 只要 * 或者 - 大于等于三个就可组成一条平行线。 使用 --- 作为水平分割线时，要在它的前后都空一行，防止 --- 被当成标题标记的表示方式。 示例 123456---**** * * 1.11 删除线使用 ~~ 表示删除线。 注意 ~~ 和 要添加删除线的文字之间不能有空格。 我常使用在显示的告诉自己这行文字是要删除的。 示例 1~~这是一条删除线~~ 这是一条删除线 想要了解更多语法，请自行上网查阅]]></content>
      <categories>
        <category>常用技术</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下Git与Node.js的安装--（Hexo个人博客搭建前期准备）]]></title>
    <url>%2FWin-Install-Git-Nodejs%2F</url>
    <content type="text"><![CDATA[在搭建Hexo个人博客之前，需要先安装Git与Node.js环境（具体可参见Hexo官方文档 开始使用-概述 的相关描述），下面我们简单介绍一下具体的安装步骤，希望对你有所帮助。 说明：本文只针对Windows平台下的Git与Node.js安装，其他平台的请自行上网查阅 1.Git安装 Git是什么： Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 下载Git For Windows：Git，进入下载页面后，会默认自动下载最新版本的安装程序，如果长时间没反应，点击click here to download manually手动下载Git安装程序，我下载时的版本为Git-2.13.0-64-bit.exe。 下载好后，安装过程和普通的桌面应用程序一样，傻瓜式的下一步，直到完成。 安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，点击后弹出一个类似CMD（命令行）窗口的东西，就说明Git安装成功了，使用git --version命令可查看安装的git版本； 2.Node.js安装 Node.js是什么： Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 Node.js 的包管理器 npm，是全球最大的开源库生态系统 下载Node.js For Windows：Node.js，进入下载页面后，根据自己的操作系统选择对应的安装包，我的电脑是64位的win10，选择的版本是node-v6.11.0-x64.msi。 下载好后，安装过程和普通的桌面应用程序一样，傻瓜式的下一步，直到完成。 安装完成后，在命令行窗口，输入path命令，查看nodejs是否已配置到环境变量中，如果没有，需要手动配置，这和我们在配置JDK环境时设置path的方法一样。设置好后，我们就可以在CMD窗口或GIT SHELL窗口直接使用Note.js的包管理器npm了。 在命令行窗口中，使用node -v命令查看安装的Node.js的版本，如果你获得下面输出结果，说明你已经成功安装了Node.js。 是不是非常简单，通过上述几步，我们已经完成了Git和Node.js的安装，接下来我们就可以准备部署我们的Hexo个人博客了。]]></content>
      <categories>
        <category>常用技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>Git</tag>
        <tag>Windows</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
</search>
